# create method to generate documentation for a code file
import os
from pathlib import Path
from urllib.parse import urlparse
from utils.github_utils import clone_repo, crawl_repo
from utils.docgen_utils import generate_doc_using_llm_client


DOCS_DIR = "docs"

def ensure_docs_dir():
    Path(DOCS_DIR).mkdir(parents=True, exist_ok=True)

def repo_slug_from_url(url: str) -> str:
    """
    Turn https://github.com/user/repo(.git) ‚Üí user-repo
    """
    try:
        path = urlparse(url).path.strip("/")
        if path.endswith(".git"):
            path = path[:-4]
        owner, repo = path.split("/")[:2]
        return f"{owner}-{repo}"
    except Exception:
        return "repository"

def md_anchor(text: str) -> str:
    """
    Convert a filepath into a GitHub-style anchor (rough).
    """
    anchor = text.lower()
    for ch in " ~`!@#$%^&*()+=[]{}|;:'\",.<>?/\\":
        anchor = anchor.replace(ch, "-")
    return "-".join(filter(None, anchor.split("-")))

def docgen_run_single(url, output_doc="generated_doc.md"):
    if not url:
     url = input("Enter GitHub repo URL: ").strip()
    local_path = clone_repo(url)
    code_files = crawl_repo(local_path, file_types=['.py', '.java', '.txt'])

    if not code_files:
        print("No files found matching the requested extensions.")
        return

    print(f"\nüìÑ Generating documentation for {len(code_files)} files...")

    # Generate per-file markdown sections (in memory)
    sections = []
    toc_entries = []

    for file in code_files:
        relative_path = file['path'].replace(local_path + os.sep, "")
        print(f"üîç Documenting: {relative_path}")

        # Generate the doc for this file
        doc_body = generate_doc_using_llm_client(file['content']).strip()

        # Build a section with a stable heading
        heading = f"## {relative_path}"
        sections.append(f"{heading}\n\n{doc_body}\n")

        # Add to TOC
        toc_entries.append((relative_path, md_anchor(relative_path)))

    # Compose the single markdown
    ensure_docs_dir()
    repo_slug = repo_slug_from_url(url)
    outfile = Path(DOCS_DIR) / output_doc

    # Title + intro
    lines = []
    lines.append(f"# Documentation: `{repo_slug}`")
    lines.append("")
    lines.append("> Generated by docgen_run_single (one-file output).")
    lines.append("")

    # TOC
    lines.append("## Table of Contents")
    for path, anchor in toc_entries:
        lines.append(f"- [{path}](#{anchor})")
    lines.append("")

    # Sections
    # Re-insert headings, but ensure anchors match our TOC generator:
    # GitHub auto-generates anchors from headings, but for portability, add explicit anchors.
    combined = "\n".join(lines + [
        # Add explicit HTML anchors to ensure links work consistently across viewers
        "\n".join([f'<a id="{md_anchor(s.splitlines()[0].replace("## ", "").strip())}"></a>\n{s}' for s in sections])
    ])

    outfile.write_text(combined, encoding="utf-8")
    print(f"\n‚úÖ Wrote single combined doc: {outfile.resolve()}")


def sanitize_filename(path_str: str) -> str:
    # Replace slashes and other unsafe chars
    return path_str.replace(os.sep, "_").replace("/", "_")


def save_markdown_file(relative_path: str, content: str):
    """
    Save generated documentation to a markdown file inside DOCS_DIR.
    """
    ensure_docs_dir()
    md_filename = sanitize_filename(relative_path) + ".md"
    output_path = Path(DOCS_DIR) / md_filename
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(f"# Documentation for `{relative_path}`\n\n")
        f.write(content.strip() + "\n")
    return output_path


def write_summary(summary_entries):
    """
    summary_entries: list of (original_path, md_path)
    Creates a SUMMARY.md with links to all docs.
    """
    summary_path = Path(DOCS_DIR) / "SUMMARY.md"
    with open(summary_path, "w", encoding="utf-8") as f:
        f.write("# Repository Documentation Summary\n\n")
        for original, md_file in summary_entries:
            rel_link = os.path.basename(md_file)
            f.write(f"- [{original}]({rel_link})\n")
    return summary_path


def docgen_run_multi():
    url = input("Enter GitHub repo URL: ").strip()
    local_path = clone_repo(url)
    code_files = crawl_repo(local_path, file_types=['.py', '.java', '.txt'])

    print(f"\nüìÑ Generating documentation for {len(code_files)} files...")

    summary_entries = []

    for file in code_files:
        relative_path = file['path'].replace(local_path + os.sep, "")
        print(f"\nüîç Documenting: {relative_path}")

        doc = generate_doc_using_llm_client(file['content'])

        md_path = save_markdown_file(relative_path, doc)
        summary_entries.append((relative_path, md_path))

        print(f"‚úÖ Saved documentation: {md_path}")

    summary_file = write_summary(summary_entries)
    print(f"\nüìö Summary file created at: {summary_file}")


def docgen_run_print():
    url = input("Enter GitHub repo URL: ").strip()
    local_path = clone_repo(url)
    code_files = crawl_repo(local_path, file_types=['.py', 'java', 'txt'])

    print(f"\nüìÑ Generating documentation for {len(code_files)} Python files...")

    for file in code_files:
        relative_path = file['path'].replace(local_path + "/", "")
        print(f"\nüîç Documenting: {relative_path}")
        doc = generate_doc(file['content'])
        print(f"\nüìù Generated Documentation for {relative_path}:\n")
        print(doc)
        print("\n" + "="*60)